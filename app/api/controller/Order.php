<?php
/**
 * Created by PhpStorm.
 * User: tianfeiwen
 * Date: 2017/9/25
 * Time: 8:59
 */

namespace app\api\controller;

use think\facade\Db;
use think\facade\Config;
use app\common\model\Price;
use app\common\model\Address;
use app\common\model\Order as OrderModel;
use \think\facade\Cache;
use app\common\service\Payment;
use app\common\model\Member;
use app\common\service\Users;
use app\common\model\MemberWalletLogModel;

class Order extends Base
{
    public function initialize()
    {
        header("Content-type:text/html;charset=utf-8");
        parent::initialize(); // TODO: Change the autogenerated stub
    }
    /**
     * Confirm order When calling this method, the user must have added a mailing address
     * @return \think\response\Json
     */
    public function confirm_order()
    {
        $user_id = $this->uid();
        //call shipping address
        $addrModel = new Address();
        $address = $addrModel->getNormalAddress($user_id);
        if (!$address['status']) {
            return json(['status' => 0, 'msg' => 'Please set the logistics address first']);
        }
        $address = $address['data'];
        //Retrieve shopping cart product information
        $cartList = DB::name('cart')->where(['user_id' => $user_id, 'selected' => 1])->alias('a')->join('shop_lists b', 'b.id= a.shop_id')->field('a.*,b.name as shop_name')->select()->toArray();
        if (!$cartList) {
            return json(['status' => 0, 'msg' => 'No items selected in the shopping cart']);
        }
        $member   = new member();
        $user_integral     = $member->where('id', $user_id)->value('integral');
        $user_money        = $member->where('id', $user_id)->value('money');
        //Express shipping
        $priceModel = new Price();
        $goodsPrice = $priceModel->calculate_price($user_id, $cartList, 0, $address['province'], $address['city'], $address['district'], $user_integral, $user_money);
        if ($goodsPrice['status'] == 0) {
            return json(['status' => 0, 'msg' => $goodsPrice['msg']]);
        }
        //Points credit
        $goods_ids = [];
        foreach ($cartList as $k => $v) {
            $goods_ids[] = $v['goods_id'];
        }
        $exchange_integral = Db::name('goods')->where('id', 'in', $goods_ids)->column('exchange_integral','id');
        $integral = 0;
        foreach ($cartList as $v) {
            $integral = $v['goods_num'] * $exchange_integral[$v['goods_id']];
        }
        // group by store
        $cartListGroup=[];
        foreach ($cartList as $k => $val) { //Data merchant grouping
            $cartListGroup[$val['shop_name']][] = $val;
        }


        $user_money        = $user_money > $goodsPrice['result']['order_amount'] ? $goodsPrice['result']['order_amount'] : $user_money; //Guaranteed balance credit will not exceed the amount that can be paid for the item
        $integral = $integral > $user_integral ? $user_integral : $integral;//Guarantee that the deductible points will not exceed all the user's points
        $point_rate = config('config.point_rate');
        $exchange_integral_money = $integral/$point_rate;
        $return = [
            'address' => $address, //address information
            'goods_list' => $cartListGroup, //Order item list
            'goods_price' => $goodsPrice['result'], //price list
            'exchange_integral' => (int) $integral, // convertible points
            'exchange_integral_money' => $exchange_integral_money, //Amount corresponding to redeemable points
            'user_money' => $user_money //User balance
        ];
        return json(['status' => 1, 'msg' => 'Confirming the order', 'data' => $return]);
    }

    /**
     *Submit orders
     *@param address_id address id
     *@param
     */
    public function add_order($password, $address_id, $pay_points = 0, $user_money = 0, $content = '')
    {
        $user_id = $this->uid();
        //Retrieve shopping cart product information
        $cartList = DB::name('cart')->where(['user_id' => $user_id, 'selected' => 1])->select()->toArray();
        if (!$cartList) {
            return json(['status' => 0, 'msg' => 'No items selected in the shopping cart']);
        }

        foreach ($cartList as $k => $v) {
            if ($v['prom_type'] == 1) {
                //Purchase order to determine whether it can be purchased
                $flash_sale = new \app\common\model\FlashSale($v['prom_id']);
                if ($flash_sale->checkFlashSaleIsEnd()) {
                   return json(['status' => 0, 'msg' => $v['goods_name'].'-The snap-up campaign has ended']);
                }
                if (!$flash_sale->checkActivityIsAble()) {
                    return json(['status' => 0, 'msg' => $v['goods_name'].'-Shopping activity has not started']);
                }
                $goods_num = $flash_sale->getUserFlashResidueGoodsNum($user_id, $v['goods_num']);
                if ($v['goods_num'] > $goods_num) {
                    return json(['status' => 0, 'msg' => $v['goods_name'].'-Insufficient number of snaps, you can still buy '.$goods_num.'pieces']);
                }
            }
        }
        //transaction password
        $jypwd=base64_encode(md5($password,true));
        $pay_pwd=Db::name('member')->where('id',$user_id)->value('pay_password');
        if(!$pay_pwd){
            return json(['code'=>0,'data'=>[],'msg'=>'Please set the transaction password first']);
        }
        if($jypwd != $pay_pwd){
            return json(['code'=>0,'data'=>[],'msg'=>'transaction password is incorrect']);
        }
        $addrModel = new Address();
        //call shipping address //mailing address
        $address = $addrModel->getNormalAddress($user_id,$address_id);

        if (!$address['status']) {
            return json(['status' => 0, 'msg' => 'Please set the logistics address first']);
        }
        $address = $address['data'];
        $member   = new member();
        $pay_points = $member->where('id', $user_id)->value('integral');
        $user_money = $member->where('id', $user_id)->value('money');
        $orderModel = new OrderModel();
        $res = $orderModel->addOrder($user_id,$cartList, $address,$pay_points,$user_money, $content);
        if ($res['status'] == 1) {
            $data['order_id']     = $res['result'];
            $data['order_amount'] = $res['payables'];
            // increase item sales
            $order_goods = Db::name('order_goods')->where('order_id',$data['order_id'][1000])->select();
            foreach ($order_goods as $k => $v) {
                Db::name('goods')->where('id',$v['goods_id'])->inc('sales_num', $v['goods_num'])->update();
                //decrease stock
                Db::name('goods')->where('id',$v['goods_id'])->dec('spec_num', $v['goods_num'])->update();
                Db::name('spec_goods')->where(['goods_id'=>$v['goods_id'],'spec_key'=>$v['spec_key']])->dec('spec_num')- >update();
            }
            return json(['status' => 1, 'msg' => 'Order submitted successfully', 'data' => $data]);
        }else if($res['status'] == 0) {
            return json(['status' => 0, 'msg' => $res['msg'], 'data' => '']);
        }
        return json(['status' => 0, 'msg' => 'Failed to submit order', 'data' => '']);
    }

    public function check_goods_address($user_address,$spec_id)
    {
        //keyword
        $goods_address_name=Db::name('goods_spec_item')->where('id',$spec_id)->value('item');
        $is_ok=strstr($user_address, $goods_address_name);
        if($is_ok==false){
            if($goods_address_name != 'Continent'){
                return json(['status' => 0, 'msg' => 'Sorry, this item is exclusive to <span style="color:red;">'.$goods_address_name.'</span> and cannot be mailed to you address']);
            }
            if(strstr($user_address, 'Taiwan')){
                return json(['status' => 0, 'msg' => 'Sorry, this item is exclusive to <span style="color:red;">'.$goods_address_name.'</span> and cannot be mailed to you address']);
            }
            if(strstr($user_address, 'Singapore')){
                return json(['status' => 0, 'msg' => 'Sorry, this item is exclusive to <span style="color:red;">'.$goods_address_name.'</span> and cannot be mailed to you address']);
            }
        }

    }
    //confirm purchase        
    public function confirm_purch($goods_id,$num,$goods_spec_key = ''){
        // return json(['code'=>1,'data'=>$goods_spec_key,'msg'=>$goods_id]);
        $user_id = $this->uid();
        //call shipping address
        $addrModel = new Address();
        $address = $addrModel->getNormalAddress($user_id);
        if (!$address['status']) {
            return json(['status' => 0, 'msg' => 'Please set the logistics address first']);
        }
        // if($goods_spec_key!==""){
        // //Determine whether the address can purchase the product
        //     $res=$this->check_goods_address($address['data']['pcd'],$goods_spec_key);
        //     if($res){
        //         return $res;
        //     }
        // }
        
        $address = $address['data'];
        //Retrieve shopping cart product information
        $goodsDatas = DB::name('goods')->alias('a')->where('a.id',$goods_id)->join('shop_lists b','b.id= a.shop_id ')->field('a.*,b.name as shop_name')->select()->toArray();
        if (!$goodsDatas) {
            return json(['status' => 0, 'msg' => 'No item selected']);
        }
        if($goodsDatas[0]['top_cate'] == 1){
            // Determine if you are eligible to buy
            $goods_grade = $this->order_goods_grade($user_id,$goodsDatas[0]);
            if($goods_grade){
                return $goods_grade;
            }
        }
        // limit the number
        if($goodsDatas[0]['limit_num'] != 0 && $goodsDatas[0]['limit_num'] < $num ){
            return json(['status'=>0,'msg'=>'this item can be purchased at most:'.$goodsDatas[0]['limit_num']]);
        }
        $goodsData = [];
        foreach ($goodsDatas as $k => $v) {
            if ($goods_spec_key) {
            $goodsSpec = Db::name('spec_goods')->where('goods_id', $v['id'])->where('spec_key', $goods_spec_key)->find();

            if ($goodsSpec) {
                $goodsData[$k]['goods_price'] = $goodsSpec['shop_price'];
                $goodsData[$k]['member_goods_price'] = $goodsSpec['shop_price'];
            } else {
                return json(['status' => 0, 'msg' => 'No product of this specification found', 'result' => '']);
            }
            if($goodsSpec['spec_num']<=0){
                return json(['status' => 0, 'msg' => 'Insufficient stock', 'result' => '']);
            }
            }else{
                return json(['status' => 0, 'msg' => 'No product of this specification found', 'result' => '']);
            }

           $goodsData[$k]['shop_id'] = $v['shop_id']; // merchant id
            $goodsData[$k]['shop_name'] = $v['shop_name']; // merchant id
            $goodsData[$k]['goods_id'] = $v['id']; // item id
            $goodsData[$k]['goods_sn'] = $v['goods_sn']; // item number
            $goodsData[$k]['top_cate'] = $v['top_cate']; // top category
            $goodsData[$k]['goods_name'] = $v['goods_name']; // product name
            $goodsData[$k]['market_price'] = $v['market_price']; // market price
            $goodsData[$k]['goods_num'] = $num; // Purchase quantity
            $goodsData[$k]['goods_img'] = $v['original_img']; //Default product original image
            $goodsData[$k]['prom_type'] = 0; // 0 normal order, 1 flash sale, 2 group purchase, 3 promotion offer
            $goodsData[$k]['prom_id'] = 0; // event id

            if($goods_spec_key){
            $goodsData[$k]['spec_key'] = $goods_spec_key;
            $goodsData[$k]['spec_key_name'] = $goodsSpec['spec_name']; //Spec spec_name
            $goodsData[$k]['sku'] = $goodsSpec['spec_sku']; //sku
            $img = Db::name('spec_image')->where([['goods_id','=',$v['id']], ['spec_item_id','in', explode('_', $goods_spec_key)]])->value('src');
            if ($img) {
                //Use the image of this specification
                $goodsData[$k]['goods_img'] = $img;
            }
            }
        }

        //Points credit
        $goods_ids = [];
        foreach ($goodsData as $k => $v) {
            $goods_ids[] = $v['goods_id'];
        }
        $exchange_integral = Db::name('goods')->where('id', 'in', $goods_ids)->column('exchange_integral','id');
        $integral = 0;
        foreach ($goodsData as $v) {
            $integral = $v['goods_num'] * $exchange_integral[$v['goods_id']];
        }
        //Group by store
        $cartListGroup=[];
        foreach ($goodsData as $k => $val) {    //Data Merchant Group
            $cartListGroup[$val['shop_name']][] = $val;
        }

        $member = new member();
        $user_integral     = $member->where('id', $user_id)->value('integral');
        $user_money        = $member->where('id', $user_id)->value('money');

        //Express shipping
        $priceModel = new Price();
        $goodsPrice = $priceModel->calculate_price($user_id, $goodsData, 0, $address['province'], $address['city'], $address['district'], $user_integral, $user_money);

        if ($goodsPrice['status'] == 0) {
            return json(['status' => 0, 'msg' => $goodsPrice['msg']]);
        }

       $user_money = $user_money >= $goodsPrice['result']['order_amount'] ? $goodsPrice['result']['order_amount'] : $user_money; //Guaranteed that the balance credit will not exceed the payment amount of the goods
        //$integral = $integral >= $user_integral ? $user_integral : $integral;
        $integral = $user_integral;//Guarantee that the deductible points will not exceed all the user's points

        $point_rate = config('config.point_rate');
        $exchange_integral_money = $integral/$point_rate;

        $return = [
            'address' => $address, //address information
            'goods_list' => $cartListGroup, //Order item list
            'goods_price' => $goodsPrice['result'], //price list
            'exchange_integral' => (int) $integral, // convertible points
            'exchange_integral_money' => $exchange_integral_money, //Amount corresponding to redeemable points
            'user_money' => $user_money //User balance
        ];
        return json(['status' => 1, 'msg' => 'confirming the order', 'data' => $return]);
    }

    /*
        type whether to pay on behalf of
    */
    //Item buy now
    public function purch_order($password,$goods_id,$num,$goods_spec_key = '', $address_id, $pay_points = 0, $user_money = 0, $content = ''){

        // return json(['code'=>1,'data'=>$goods_spec_key,'msg'=>$goods_id]);
        $user_id = $this->uid();
        $filenames=app()->getRuntimePath().'paixia'.$user_id.'.log';
        if(!is_file($filenames)){
            file_put_contents($filenames,$user_id);
        }
        $fp = fopen($filenames, "r");
        if(flock($fp,LOCK_EX)){
            $goods = Db::name('goods')->find($goods_id);
            if(!$goods){
                flock($fp,LOCK_UN);
                fclose($fp);
                return json(['status'=>0,'msg'=>'The item does not exist']);
            }

            $jypwd=base64_encode(md5($password,true));
            $pay_pwd=Db::name('member')->where('id',$user_id)->value('pay_password');
            if(!$pay_pwd){
                flock($fp,LOCK_UN);
                fclose($fp);
                return json(['status'=>0,'data'=>[],'msg'=>'Please set the transaction password first']);
            }
            if($jypwd != $pay_pwd){
                flock($fp,LOCK_UN);
                fclose($fp);
                return json(['status'=>0,'data'=>[],'msg'=>'transaction password is incorrect']);
            }

            // limit the number
            if($goods['limit_num'] != 0 && $goods['limit_num'] < $num ){
                flock($fp,LOCK_UN);
                fclose($fp);
                return json(['status'=>0,'msg'=>'This item can be purchased at most:'.$goods['limit_num']]);
            }

            //if ($goods_spec_key) {
            $goodsSpec = Db::name('spec_goods')->where('goods_id', $goods['id'])->where('spec_key', $goods_spec_key)->find();
            if ($goodsSpec) {
                $goodsStore = $goodsSpec['spec_num'];
                $goodsPrice = $goodsSpec['shop_price'];
            } else {
                flock($fp,LOCK_UN);
                fclose($fp);
                return json(['status' => 0, 'msg' => 'No product of this specification found', 'result' => '']);
            }
            //}
            if($goods['top_cate'] == 2){
                flock($fp,LOCK_UN);
                fclose($fp);
                return json(['status' => 0, 'msg' => 'This item only supports payment on behalf of others', 'result' => '']);
            }else if($goods['top_cate'] == 1){
                // Determine if you are eligible to buy
                $goods_grade = $this->order_goods_grade($user_id,$goods);
                if($goods_grade){
                    return $goods_grade;
                }
            }

            

            $goodsData = [
                'shop_id' => $goods['shop_id'], // merchant id
                'goods_id' => $goods['id'], // item id
                'goods_sn' => $goods['goods_sn'], // item number
                'top_cate' => $goods['top_cate'], // top category
                'caidan_id' => $goods['caidan_id'], // menu id
                'take_id' => 0, // payer
                'goods_name' => $goods['goods_name'], // product name
                'market_price' => $goods['market_price'], // market price
                'goods_price' => $goodsPrice, // purchase price
                'member_goods_price' => $goodsPrice, // member discount price defaults to purchase price
                'goods_num' => $num, // buy quantity
                'goods_img' => $goods['original_img'], //Default product original image
                'prom_type' => 0, // 0 normal order, 1 flash sale, 2 group purchase, 3 promotion
                'prom_id' => 0, // event id
            ];
            //if($goods_spec_key){
            $goodsData['spec_key']      = $goods_spec_key;
            $goodsData['spec_key_name'] = $goodsSpec['spec_name']; //Specification spec_name
            $goodsData['sku'] = $goodsSpec['spec_sku']; //sku
            $img = Db::name('spec_image')->where([['goods_id','=',$goods['id']], ['spec_item_id','in', explode('_', $goods_spec_key)]])->value('src');
            if ($img) {
                //Use the image of this specification
                $goodsData['goods_img'] = $img;
            }
            //}

            if ($goods['prom_type'] == 1) {
                //Purchase order to determine whether it can be purchased
                // $flash_sale = new \app\common\model\FlashSale($goods['prom_id']);
                // if ($flash_sale->checkFlashSaleIsEnd()) {
                // return json(['status' => 0, 'msg' => $v['goods_name'].'-Shopping campaign has ended']);
                // }
                // if (!$flash_sale->checkActivityIsAble()) {
                // return json(['status' => 0, 'msg' => $v['goods_name'].'-buying activity has not started']);
                // }
                // $goods_num = $flash_sale->getUserFlashResidueGoodsNum($user_id, $num);
                // if ($goods['goods_num'] > $goods_num) {
                // return json(['status' => 0, 'msg' => $v['goods_name'].'-Insufficient number of snaps, you can still buy '.$num.'pieces']);
                // }
            }
            $addrModel = new Address();
            //call shipping address //mailing address
            $address = $addrModel->getNormalAddress($user_id,$address_id);

            if (!$address['status']) {
                flock($fp,LOCK_UN);
                fclose($fp);
                return json(['status' => 0, 'msg' => 'Please set the logistics address first']);
            }
            if($goods_spec_key!==""){
                //Determine whether the address can buy goods
                $res=$this->check_goods_address($address['data']['pcd'],$goods_spec_key);
                if($res){
                    flock($fp,LOCK_UN);
                    fclose($fp);
                    return $res;
                }
            }
            
            $address = $address['data'];
            // $priceModel = new Price();
            // //Calculate commodity prices
            // $goodsPrice = $priceModel->calculate_price($user_id, [$goodsData], 0, $address['province'], $address['city'], $address['district'], $pay_points, $user_money);
            $member   = new member();
            $pay_points = $member->where('id', $user_id)->value('integral');
            $user_money = $member->where('id', $user_id)->value('money');
            $orderModel = new OrderModel();
            $res = $orderModel->addOrder($take_order=1,$user_id,[$goodsData], $address,$pay_points,$user_money, $content,$order_type = 0);
            if ($res['status'] == 1) {
                $data['order_id']     = $res['result'];
                $data['order_amount'] = $res['payables'];
                // Increase merchandise sales
                $order_goods = Db::name('order_goods')->where('order_id',$data['order_id'][1000])->select();
                foreach ($order_goods as $k => $v) {
                    Db::name('goods')->where('id',$v['goods_id'])->inc('sales_num', $v['goods_num'])->update();
                    //decrease stock
                    Db::name('goods')->where('id',$v['goods_id'])->dec('spec_num', $v['goods_num'])->update();
                    Db::name('spec_goods')->where(['goods_id'=>$v['goods_id'],'spec_key'=>$v['spec_key']])->dec('spec_num')->update();
                }
                flock($fp,LOCK_UN);
                fclose($fp);
                return json(['status' => 1, 'msg' => 'Order submitted successfully', 'data' => $data]);
            }else if($res['status'] == 0) {
                flock($fp,LOCK_UN);
                fclose($fp);
                return json(['status' => 0, 'msg' => $res['msg'], 'data' => '']);
            }
                flock($fp,LOCK_UN);
                fclose($fp);
            return json(['status' => 0, 'msg' => 'Failed to submit order', 'data' => '']);
        }
    }

    //Pay for goods
    public function take_order($password,$goods_id,$num,$goods_spec_key = '', $address_id, $pay_points = 0, $user_money = 0, $content = ''){
        $user_id = $this->uid();
        $goods = Db::name('goods')->find($goods_id);
        if(!$goods){
            return json(['status'=>0,'msg'=>'This item does not exist']);
        }

        //if ($goods_spec_key) {
        $goodsSpec = Db::name('spec_goods')->where('goods_id', $goods['id'])->where('spec_key', $goods_spec_key)->find();
        if ($goodsSpec) {
            $goodsStore = $goodsSpec['spec_num'];
            $goodsPrice = $goodsSpec['shop_price'];
        } else {
            return json(['status' => 0, 'msg' => 'No product of this specification found', 'result' => '']);
        }
        //}

        if($goods['top_cate'] !=2){
            return json(['status' => 0, 'msg' => 'This product does not support payment by proxy', 'result' => '']);
        }

        $jypwd=base64_encode(md5($password,true));
        $pay_pwd=Db::name('member')->where('id',$user_id)->value('pay_password');
        if(!$pay_pwd){
            return json(['code'=>0,'data'=>[],'msg'=>'Please set the transaction password first']);
        }
        if($jypwd != $pay_pwd){
            return json(['code'=>0,'data'=>[],'msg'=>'transaction password is incorrect']);
        }

        // limit the number
        if($goods['limit_num'] != 0 && $goods['limit_num'] < $num ){
            return json(['code'=>0,'msg'=>'This item can be purchased at most:'.$goods['limit_num']]);
        }
        $member = new member();
        $member_my = $member->where('id', $user_id)->find();
        $member_tj = $member->where('id',$member_my['referid'])->find();

        if($member_tj){
            if($member_tj['dl_level'] < 1 && $member_tj['ty_level']<1) {
                return json(['status' => 0, 'msg' => 'Your referrer has no payment rights for now', 'result' => '']);
            }
        }else{
            return json(['status' => 0, 'msg' => 'No superiors can not buy paid goods', 'result' => '']);
        }
        //if($member_my['dl_level'] < 1){
        if(Db::name('order')->where(['user_id'=>$user_id,'top_cate'=>2])->where('order_status','<>',3)->where ('order_status','<>',5)->find()){
            // if($user_id!=1112){
            return json(['status' => 0, 'msg' => 'Only one application for payment on behalf of goods', 'result' => '']);
            // }
        }
        //}
        //Determine whether the payer has an excess amount today
        $take_money = Db::name('order')->where('take_id',$member_my['referid'])->where([['pay_code','=',1],['pay_time', '>=',strtotime(date("Ymd",time()))],['pay_time','<=',strtotime(date("Ymd"),time())+86399]])-> sum('total_amount');
        if($take_money >= config('config.jl_daifunum'.$member_tj['dl_level'])){
            return json(['status' => 0, 'msg' => 'Your referral payment has reached the upper limit today', 'result' => '']);
        }
        // Determine if you are eligible to buy
        // $goods_grade = $this->order_goods_grade($user_id,$goods);
        // if($goods_grade){
        //     return $goods_grade;
        // }

        $goodsData = [
            'shop_id' => $goods['shop_id'], // merchant id
            'goods_id' => $goods['id'], // item id
            'goods_sn' => $goods['goods_sn'], // item number
            'top_cate' => $goods['top_cate'], // top category
            'caidan_id' => $goods['caidan_id'], // menu id
            'take_id' => $member_my['referid'], // payer
            'goods_name' => $goods['goods_name'], // product name
            'market_price' => $goods['market_price'], // market price
            'goods_price' => $goodsPrice, // purchase price
            'member_goods_price' => $goodsPrice, // member discount price defaults to purchase price
            'goods_num' => $num, // buy quantity
            'goods_img' => $goods['original_img'], //Default product original image
            'prom_type' => 0, // 0 normal order, 1 flash sale, 2 group purchase, 3 promotion
            'prom_id' => 0, // event id
        ];
        //if($goods_spec_key){
        $goodsData['spec_key']      = $goods_spec_key;
        $goodsData['spec_key_name'] = $goodsSpec['spec_name']; //Specification spec_name
        $goodsData['sku'] = $goodsSpec['spec_sku']; //sku
        $img = Db::name('spec_image')->where([['goods_id','=',$goods['id']], ['spec_item_id','in', explode('_', $goods_spec_key)]])->value('src');
        if ($img) {
            //picture using this specification
            $goodsData['goods_img'] = $img;
        }
        //}

        if ($goods['prom_type'] == 1) {
            //Purchase order to determine whether it can be purchased
            // $flash_sale = new \app\common\model\FlashSale($goods['prom_id']);
            // if ($flash_sale->checkFlashSaleIsEnd()) {
            // return json(['status' => 0, 'msg' => $v['goods_name'].'-The snap sale has ended']);
            // }
            // if (!$flash_sale->checkActivityIsAble()) {
            // return json(['status' => 0, 'msg' => $v['goods_name'].'-buying activity has not started']);
            // }
            // $goods_num = $flash_sale->getUserFlashResidueGoodsNum($user_id, $num);
            // if ($goods['goods_num'] > $goods_num) {
            // return json(['status' => 0, 'msg' => $v['goods_name'].'-Insufficient number of snaps, you can still buy '.$num.'pieces']);
            // }
        }
        $addrModel = new Address();
        //call shipping address //mailing address
        $address = $addrModel->getNormalAddress($user_id,$address_id);

        if (!$address['status']) {
            return json(['status' => 0, 'msg' => 'Please set the logistics address first']);
        }
        if($goods_spec_key!==""){
            //Determine whether the address can buy the product
            $res=$this->check_goods_address($address['data']['pcd'],$goods_spec_key);
            if($res){
                // flock($fp,LOCK_UN);
                // fclose($fp);
                return $res;
            }
        }
        
        $address = $address['data'];
        // $priceModel = new Price();
        // //Calculate the item price
        // $goodsPrice = $priceModel->calculate_price($user_id, [$goodsData], 0, $address['province'], $address['city'], $address['district'], $pay_points, $user_money );

        $pay_points = $member_my['integral'];
        $user_money = $member_my['money'];
        $orderModel = new OrderModel();
        $res = $orderModel->addOrder($take_order=0,$user_id,[$goodsData], $address,$pay_points,$user_money, $content,$order_type = 0,'','',0,'', 1);
        if ($res['status'] == 1) {
            $data['order_id'] = $res['result'];
            $data['order_amount'] = $res['payables'];
            // increase item sales
            $order_goods = Db::name('order_goods')->where('order_id',$data['order_id'][1000])->select();
            foreach ($order_goods as $k => $v) {
                Db::name('goods')->where('id',$v['goods_id'])->inc('sales_num', $v['goods_num'])->update();
                //decrease stock
                Db::name('goods')->where('id',$v['goods_id'])->dec('spec_num', $v['goods_num'])->update();
                Db::name('spec_goods')->where(['goods_id'=>$v['goods_id'],'spec_key'=>$v['spec_key']])->dec('spec_num')- >update();
            }
            return json(['status' => 1, 'msg' => 'Order submitted successfully', 'data' => $data]);
        }else if($res['status'] == 0) {
            return json(['status' => 0, 'msg' => $res['msg'], 'data' => '']);
        }
        return json(['status' => 0, 'msg' => 'Failed to submit order', 'data' => '']);
    }

    // product level processing
    public function order_goods_grade($user_id,$goodsData){
        $member = new member();
        //user level
        $dl_level = $member->where('id',$user_id)->value('dl_level');

        if($dl_level >= $goodsData['caidan_id']){
            return json(['status' => 0, 'msg' => 'Your level is too high to buy', 'data' => '']);
        }
        // if($dl_level == 0 && $goodsData['caidan_id'] == 2){
        // return json(['status' => 0, 'msg' => 'Your level is insufficient, you cannot buy this kind of product', 'data' => '']);
        // }
        $find = Db::name('order')->where(['caidan_id'=>$goodsData['caidan_id'],'user_id'=>$user_id])->find();
        if($find){
            return json(['status' => 0, 'msg' => 'This type of product can only be purchased once', 'data' => '']);
        }
        return false;

    }

    //Total order status
    public function order_num(){
        $user_id = $this->uid();
        $map            = [];
        $map[] = ['deleted','=',0];
        $map[] = ['user_id','=',$user_id];
        $data[0] = Db::name('order')->where($map)->where([['pay_status','=',0],['order_status','in', [0, 1]],['shipping_status','=',0]])->count();

        $data[1] = Db::name('order')->where($map)->where([['pay_status','in', [1, 3]],['order_status','in', [0, 1]],['shipping_status','=',0]])->count();

        $data[2] = Db::name('order')->where($map)->where([['pay_status','in', [1, 3]],['order_status','=',1],['shipping_status','=',1]])->count();

        $data[3] = Db::name('order')->where($map)->where([['pay_status','in', [1, 4]],['order_status','=',2],['shipping_status','=',1]])->count();

        $data[4] = Db::name('return_goods')->where([['user_id','=',$user_id],['status','=',0]])->count();
        return json($data);
    }

    /**
     * @param int $type // 0All orders 1st generation payment 2nd generation delivery 3to be received 4to be evaluated
     * @param int $page
     * @param int $num
     * @return \think\response\Json
     */
    public function order_list($top_cate = 0 ,$type = 0, $page = 1, $num = 8)
    {
        $user_id = $this->uid();
        $ismian = Db::name('member')->where(['id'=>$user_id])->value('is_mian');
        $map            = [];
        $map[] = ['deleted','=',0];
        //$top_cate = 0;
        if($top_cate){

            //6 is the payment list
            if($top_cate ==6){
                $map[] = ['take_id','=',$user_id]; //Only the payer will display the goods paid for by the payer
                $map[] = ['top_cate','=',2];
            }else{
                $map[] = ['user_id','=',$user_id];
                $map[] = ['top_cate','=',$top_cate];
            }
        }else{
            $map[] = ['user_id|take_id','=',$user_id];
        }
        switch ($type) {
            case 1 :
                //pre-payment
                $map[]  = ['pay_status','=',0];
                $map[]  = ['order_status','in', [0, 1]];
                $map[]  = ['shipping_status','=',0];
                break;
            case 2 :
                //delivery
                $map[] = ['pay_status','in', [1, 3]];
                $map[] = ['order_status','in', [0, 1]];
                $map[] = ['shipping_status','=',0];
                break;
            case 3 :
                //to be received
                $map[] = ['pay_status','in', [1, 3]];
                $map[] = ['order_status','=',1];
                $map[] = ['shipping_status','=',1];
                break;
            case 4:
                //comment
                $map[] = ['pay_status','in', [1, 4]];
                $map[] = ['order_status','=',2];
                $map[] = ['shipping_status','=',1];
                break;
            default :
                $map[] = ['order_status','<>', 5];//Not a void order
        }

        $orderList = Db::name('order')->where($map)->order('order_id desc')->page($page, $num)->select()->toArray();
        //dd($orderList);
        if ($orderList) {
            //Query order product information
            foreach ($orderList as $k => $v) {
                if($v['pay_status'] ==2 || $v['pay_status'] ==4){
                    $orderList[$k]['return_list'] = Db::name('return_goods')->where(['order_id'=> $v['order_id'],'is_work'=>0])->order('id desc')->find();
                }
                if($user_id == $v['take_id']){ $orderList[$k]['is_pay_btn'] = true; }else{ $orderList[$k]['is_pay_btn'] = false; }
                $orderList[$k]['goods_list'] = Db::name('order_goods')->where('order_id', $v['order_id'])->select();
                $orderList[$k]['goods_num'] = 0;
                $orderList[$k]['shop_name'] = Db::name('shop_lists')->where('id',$v['shop_id'])->value('name');
                foreach ($orderList[$k]['goods_list'] as $kk => $vv) {
                    $orderList[$k]['goods_num'] += $vv['goods_num'];
                }
                $orderList[$k]['now_status'] = $this->order_status($v);
            }

            return json(['status' => 1, 'msg' => 'Get the order list successfully','ismian'=>$ismian, 'data' => $orderList]);
        }
        return json(['status' => 1, 'msg' => 'No order data','ismian'=>$ismian,'data'=>[]]);
    }
    /*
        order status code
    */
    public function order_status($v){
        /*
            order_status 0 to be confirmed 1 confirmed 2 received 3 cancelled 4 completed 5 voided
            pay_status 0 not paid 1 paid 2 applied for a refund 3 refunded 4 refused refund
            shipping_status 0 not shipped 1 shipped 2 partially shipped
        */
        /*
            now_status -1Others 1To be shipped 2To be received 3To be evaluated 4In application 5Refunded 6Completed 7Rejected refund 8Apply for return
        */
        $now_status = -1; //Other
        if($v['pay_status'] == 0 && $v['order_status'] >= 0 && $v['order_status'] <= 1 && $v['shipping_status'] == 0){
            $now_status = 0; //Pending payment
        }else if($v['pay_status'] == 2 && $v['order_status'] >= 0 && $v['order_status'] <= 2){
            $now_status = 4; //Applying
        }else if($v['pay_status']>=1 && $v['pay_status']<=3 && $v['order_status'] >= 0 && $v['order_status'] <= 1 && $v ['shipping_status'] == 0){
            $now_status = 1; //to be shipped
        }else if($v['pay_status'] >= 1 && $v['pay_status'] <= 3 && $v['order_status'] == 1 && $v['shipping_status'] == 1){
            $now_status = 2; //to be received
        }else if($v['pay_status']>=1 && $v['pay_status']<=4 && $v['order_status'] == 2 && $v['shipping_status'] == 1){
            $now_status = 3; //To be evaluated
        }else if($v['pay_status']==3 && $v['order_status'] == 3 && $v['shipping_status'] >= 0 && $v['shipping_status'] <= 1){
            $now_status = 5; //Refunded
        }else if($v['pay_status']==4 && $v['order_status'] == 3 && $v['shipping_status'] == 1){
            $now_status = 7; //Reject refund
        }else if($v['pay_status']==2 && $v['order_status'] == 4 && $v['shipping_status'] == 1){
            $now_status = 8; // apply for return
        }else if($v['pay_status']>=1 && $v['pay_status']<=4 && $v['order_status'] == 4 && $v['shipping_status'] == 1){
            $now_status = 6; //completed
        }else if($v['pay_status']==4&& $v['order_status'] >= 0 && $v['order_status'] <= 1 && $v['shipping_status'] >= 0 && $v[ 'shipping_status'] <= 1){
            $now_status = 7; //Reject refund
        }else if($v['order_status']==3){
            $now_status = 8; //Cancelled
        }
        return $now_status;
    }

    /**
    * Get order details
     * @param $order_id order ID
     * @is_simple 0 returns all 1 returns only the basic information of the order
     * @return \think\response\Json
     */
    public function order_detail($order_id, $is_simple = 0)
    {
        $user_id = $this->uid();
//        $orderInfo = Db::name('order')->where(['user_id' => $user_id, 'order_id' => $order_id])->find();
        $orderInfo = Db::name('order')->where(['order_id' => $order_id])->find();
        if (!$orderInfo) {
            return json(['status' => 0, 'msg' => 'order does not exist']);
        }
        $orderInfo['now_status'] = $this->order_status($orderInfo);
        $orderInfo['shop_name'] = Db::name('shop_lists')->where('id',$orderInfo['shop_id'])->value('name');
        //Shipping address
        if (!$region = Cache::get('regiondata')) {
            $region    = Db::name('region')->column('name','id');
            Cache::set('regiondata', $region, 0);
        }
        $addr = '';
        isset($region[$orderInfo['province']]) && $addr .= $region[$orderInfo['province']] . ',';
        isset($region[$orderInfo['city']])     && $addr .= $region[$orderInfo['city']] . ',';
        isset($region[$orderInfo['district']]) && $addr .= $region[$orderInfo['district']] . ',';
        $orderInfo['address']                  && $addr .= $orderInfo['address'];
        $orderInfo['address_detail'] = trim(str_replace(',', ' ', $addr));
        if ($is_simple == 0) {
            //Order item list
            $orderInfo['goods_list'] = Db::name('order_goods')->where('order_id', $orderInfo['order_id'])->select();
            // shopping rebate points
            $orderInfo['give_integral'] = Db::name('order_goods')->where('order_id', $orderInfo['order_id'])->sum('give_integral');
        }
        //Is there a refund
        $orderInfo['return_id'] = 0;
        if ($orderInfo['pay_status'] > 1) {
            $orderInfo['return_id'] = Db::name('return_goods')->where(['order_id' => $order_id, 'status' => ['<>', -2]])->order( 'id desc')->value('id');
        }
        if($user_id == $orderInfo['take_id']){ $orderInfo['is_pay_btn'] = true; }else{ $orderInfo['is_pay_btn'] = false; }
        // time format conversion
        $orderInfo['add_time'] && $orderInfo['add_time'] = date('Y-m-d H:i:s', $orderInfo['add_time']);
        $orderInfo['shipping_time'] && $orderInfo['shipping_time'] = date('Y-m-d H:i:s', $orderInfo['shipping_time']);
        $orderInfo['confirm_time'] && $orderInfo['confirm_time'] = date('Y-m-d H:i:s', $orderInfo['confirm_time']);
        $orderInfo['pay_time'] && $orderInfo['pay_time'] = date('Y-m-d H:i:s', $orderInfo['pay_time']);
        return json(['status' => 1, 'msg' => 'Get order details successfully', 'data' => $orderInfo]);
    }

    //delete order
    public function del_order($order_id,$note = ''){
        $user_id = $this->uid();
        $orderModel = new OrderModel;
        $res = $orderModel->delOrder($order_id,$note,$user_id);
        return json($res);
    }

    /**
     * Request a refund
     * @param $rec_id item order
     * @param $refund_type Refund type 0 refund only 1 return refund
     * @param $imgs image, multiple images are separated by @
     * @param $reason reason for refund
     * @param $describe problem description
     * @return \think\response\Json
     */
    public function return_goods($order_id, $is_work=0, $refund_type = 0, $refund_kddh='', $refund_kdlx='', $imgs = [], $reason = '', $describe = '')
    {
        $user_id = $this->uid();
        //First determine whether to apply for a refund
        $orderInfo = Db::name('order')->where('order_id', $order_id)->find();
        if ($orderInfo['user_id'] != $user_id) {
            return json(['status' => 0, 'msg' => 'unauthorized operation']);
        }
        if ($orderInfo['pay_status'] == 0) {
            return json(['status' => 0, 'msg' => 'order not paid and cannot be returned']);
        }
        if(Db::name('return_goods')->where(['order_id'=>$orderInfo['order_id'],'is_work'=>1])->find()){
            return json(['status' => 0, 'msg' => 'You have submitted a ticket']);
        }
        $orderModel = new OrderModel();
        $res = $orderModel->add_return_goods($order_id,$is_work,$refund_type,$refund_kddh,$refund_kdlx, $imgs, $reason, $describe);
        return json(['status' => $res['code'], 'msg' => $res['msg'], 'data' => $res['result']]);
    }

    /**
     * Submit work order
     * @param $rec_id refund id
     * @param $refund_type Refund type 0 refund only 1 return refund
     * @param $imgs image, multiple images are separated by @
     * @param $reason reason for refund
     * @param $describe problem description
     * @return \think\response\Json
     */
    public function return_goods_del($id)
    {
        $user_id = $this->uid();
        $return_goods = Db::name('return_goods')->where(['id'=>$id,'user_id'=>$user_id])->find();
        if($return_goods['status'] == 1){

            return json(['status' => 0, 'msg' => 'delete']);
        }
    }

    // continue to return
    public function return_confirm($id,$refund_kddh='',$refund_kdlx=''){
        $user_id = $this->uid();
        $return_goods = Db::name('return_goods')->where(['id'=>$id,'user_id'=>$user_id])->find();
        if ($return_goods['status'] != 0) {
            return json(['code' => 0, 'msg' => 'The refund application has been processed and cannot be returned']);
        }
        if($return_goods['refund_confirm'] == 1){
            $res = Db::name('return_goods')->where(['id'=>$id,'user_id'=>$user_id])->update(['refund_confirm'=>2,'refund_kddh'= >$refund_kddh,'refund_kdlx'=>$refund_kdlx]);
            if($res){
                return json(['status' => 1, 'msg' => 'Continue refund has been submitted']);
            }else{
                return json(['status' => 0, 'msg' => 'submission failed']);
            }
        }else{
            return json(['status' => 0, 'msg' => 'The merchant has not confirmed']);
        }

    }


    /**
     * Refund details
     * @param $id return_goods primary key ID
     * @return \think\response\Json
     */
    public function return_detail($id)
    {
        $user_id = $this->uid();
        $returnInfo = Db::name('return_goods')->alias('a')->join('shop_lists b','b.id= a.shop_id')->field('a.*,b.name as shop_name')->where(['a.user_id' => $user_id, 'a.id' => $id])->find();
        if (!$returnInfo) {
            return json(['status' => 0, 'msg' => 'The application details were not found']);
        }
        //$returnInfo['addtime'] = date('Y-m-d H:i:s', $returnInfo['addtime']);
        //$returnInfo['refund_time'] && $returnInfo['refund_time'] = date('Y-m-d H:i:s', $returnInfo['refund_time']);
        if ($returnInfo['imgs']) {
            $returnInfo['imgs']    = explode('@', json_decode($returnInfo['imgs']));
            //Compatible with front-end template writing
            $imgs = [];
            foreach ($returnInfo['imgs'] as $v) {
                $imgs[]['url'] = $v;
            }
            $returnInfo['imgs'] = $imgs;
        }
        $returnInfo['goods_list'] = Db::name('order_goods')->where('order_id', $returnInfo['order_id'])->select();
//        $returnInfo['return_list'] = Db::name('return_goods')->where('id', $id)->order('addtime desc')->select();
        return json(['status' => 1, 'msg' => 'Query refund details successfully', 'data' => $returnInfo]);
    }

    /**
     * List of refund records
     * @param int $page
     * @param int $num
     * @return \think\response\Json
     */
    public function return_list($type=0,$page = 1, $num = 8)
    {
        $user_id = $this->uid();
        $returnList = Db::name('return_goods')->alias('a')->join('shop_lists b','b.id= a.shop_id')->field('a.*,b.name as shop_name')->where([['a.user_id','=', $user_id], ['a.status', '<>', -2],['is_work','=',$type]])->order('id desc')->page($page, $num)->select()->toArray();
        foreach ($returnList as $k => $v) {
            $returnList[$k]['goods_list'] = Db::name('order_goods')->where('order_id', $v['order_id'])->select();
        }
        return json(['status' => 1, 'msg' => 'Obtaining the list of refund records succeeded', 'data' => $returnList]);
    }

    /**
     * Cancellation refund
     * @param $id return_goods primary key ID
     * @return \think\response\Json
     * @throws \think\Exception
     */
    public function cancel_return($id)
    {
        $user_id = $this->uid();
        $returnInfo = Db::name('return_goods')->where([['user_id','=', $user_id], ['id','=',$id], ['status','< >', -2]])->find();
        if (!$returnInfo) {
            return json(['status' => 0, 'msg' => 'The application details were not found']);
        }
        if ($returnInfo['status'] == 1) {
            return json(['status' => 0, 'msg' => 'The application has been processed and cannot be cancelled']);
        }
        $model = new OrderModel();
        $model->returnGoodsStatus($id, -2);
        return json(['status' => 1, 'msg' => 'Cancel refund successfully']);
    }

    /**
     * confirm the receipt of goods
     * @param $order_id
     * @return \think\response\Json
     */
    public function delivery_confirm($order_id,$password)
    {
        $user_id = $this->uid();
        //transaction password
        $jypwd=base64_encode(md5($password,true));
        $pay_pwd=Db::name('member')->where('id',$user_id)->value('pay_password');
        if(!$pay_pwd){
            return json(['code'=>0,'data'=>[],'msg'=>'Please set the transaction password first']);
        }
        if($jypwd != $pay_pwd){
            return json(['code'=>0,'data'=>[],'msg'=>'transaction password is incorrect']);
        }

        $orderInfo = Db::name('order')->where(['order_id' => $order_id, 'user_id' => $user_id])->find();
        if (!$orderInfo) {
            return json(['status' => 0, 'msg' => 'The order was not found']);
        }
        $orderModel = new OrderModel();
        $res = $orderModel->confirm_order($orderInfo['order_sn']);
        return json($res);
    }

    /**
     * cancel order
     * @param $order_id
     * @return \think\response\Json
     */
    public function cancel_order($order_id)
    {
        $user_id = $this->uid();
        $orderModel = new OrderModel();
        $res = $orderModel->cancel_order($user_id, $order_id);
        return json(['status' => $res['status'], 'msg' => $res['msg']]);
    }

    /**
     * Pay for the order
     * @param $order_id order ID
     * @param $pay_type payment method balance balance alipay alipay wxpay wechat
     * @return array
     * song 1 means free order, no need to pay
     */
    public function pay_order($order_id,$password,$pay_type='balance',$song = 0)
    {
        $user_id = $this->uid();
        //transaction password
        $jypwd=base64_encode(md5($password,true));
        $pay_pwd=Db::name('member')->where('id',$user_id)->value('pay_password');
        if(!$pay_pwd){
            return json(['status'=>0,'data'=>[],'msg'=>'Please set the transaction password first']);
        }
        if($jypwd != $pay_pwd){
            return json(['status'=>0,'data'=>[],'msg'=>'transaction password is incorrect']);
        }
        $orderInfo = Db::name('order')->where(['take_id'=>$user_id,'order_id'=>$order_id])->find();
        if (!$orderInfo) {
            return json(['status' => 0, 'msg' => 'The payment order was not found']);
        }
        if ($orderInfo['order_status'] == 3 ) {
            return json(['status' => 0, 'msg' => 'The order has been cancelled']);
        }
        if($orderInfo['pay_status'] == 1){
            return json(['status' => 0, 'msg' => 'The order has been paid']);
        }
        if($orderInfo['top_cate'] != 2){
            return json(['status' => 0, 'msg' => 'This order does not belong to agency payment']);
        }

        $users = new Users();
        //KRC voucher
        $take_user = Db::name('member')->where('id',$user_id)->field('money,pool_sale,dl_level,ty_level,is_mian')->find();
        if($take_user['is_mian']==0 && $song==1){
            return json(['status' => 0, 'msg' => 'Free gift error operation']);
        }
        if($take_user['dl_level']<1 && $take_user['ty_level']<1){
            return json(['status' => 0, 'msg' => 'You currently do not have permission to pay orders']);
        }
        $goods_idss =Db::name('order_goods')->where(['order_id'=>$order_id])->value('goods_id');
        $fenlei =Db::name('goods')->where(['id'=>$goods_idss])->value('fenlei');
        if($take_user['dl_level']<1 && $take_user['ty_level']>=1 && $fenlei==1 && $song==1){
            return json(['status' => 0, 'msg' => 'You are an E-level member temporarily unable to give free preferential products']);
        }

        $order_money = bcadd($orderInfo['user_money'],$orderInfo['order_amount'],2);
        // need a voucher
        $pool_sale = round($order_money * 0.1,2);

        // Required KRC
        $goods_money = $order_money - $pool_sale;
        if($song==0) {
            if ($take_user['money'] < $goods_money) {
                return json(['status' => 0, 'msg' => 'Your amount is insufficient, please recharge']);
            }
            //Is the voucher sufficient?
            if ($take_user['pool_sale'] < round($order_money * 0.1, 2)) {
                return json(['status' => 0, 'msg' => 'Your voucher is insufficient:' . round($order_money * 0.1, 2)]);
            }
        }
        //Determine whether the payer has an excess amount today
        $take_money = Db::name('order')->where('take_id',$user_id)->where([['pay_code','=',1],['pay_time','>=', strtotime(date("Ymd",time()))],['pay_time','<=',strtotime(date("Ymd"),time())+86399]])->sum('total_amount' );
        if($take_money >= config('config.jl_daifunum'.$take_user['dl_level'])){
            return json(['status' => 0, 'msg' => 'Your payment has reached the upper limit today', 'result' => '']);
        }

        //open transaction
        Db::startTrans();
        try {
            // need a voucher
            //$pool_sale = round($order_money * 0.1,2);
            //$goods_money = $order_money - $pool_sale;
            // deduct balance
            if ($order_money > 0 && $song==0) {
                Db::name('member')->where('id',$user_id)->dec('pool_sale',$pool_sale)->update();
                $users->userDecMoney($user_id, $goods_money);
                //MoneyLog::operate($user_id, -$order['user_money'], 3, 1, 'Order balance deduction');
            }
            $OrderModel = new OrderModel();

            // If the payable amount is 0, it may be balance payment + points + coupons. The payment status of the order here directly becomes paid
            //if ($orderInfo['order_amount'] <= 0) {
            if($song==0) {
                $OrderModel->update_pay_status($orderInfo['order_sn'], ['pay_code' => 1]);
            }else{
                $OrderModel->update_pay_status($orderInfo['order_sn'], ['pay_code' => 10]);
                //change the gift quota
                Db::name('member')->where(['id'=>$user_id])->update(['is_mian'=>0,'mian_num'=>Db::raw('mian_num+1')]);
            }

            $MemberWalletLogModel = new MemberWalletLogModel;
            if($pool_sale > 0 && $song==0){
                $MemberWalletLogModel->log($user_id,$pool_sale,$take_user['pool_sale'],$take_user['pool_sale'] - $pool_sale,62,'Order payment reduction',$orderInfo['order_id']);
            }
            if($goods_money > 0 && $song==0){
                $MemberWalletLogModel->log($user_id,$goods_money,$take_user['money'],$take_user['money'] - $goods_money,18,'Payment order reduction',$orderInfo['order_id']);
            }

            if($song==0) {
                $users->dai_goods($user_id,$orderInfo['user_id'],$order_money);
            }elseif($song==1){
                $MemberWalletLogModel->log($user_id,0,$take_user['money'],$take_user['money'],1000,'Free gift payment',$orderInfo['order_id']);
                $users->song_goods($user_id, $orderInfo['user_id'], $order_money);
            }

            //The daily task is judged to be completed and paid on behalf of
            $pminfo = Db::name('assignment')->where(['jl_type'=>4,'status'=>1,'type'=>1])->find();
            if($pminfo){
                $users->daytask($pminfo['id'],$user_id);
            }

            //Successful payment on behalf of the order member deduction
            $OrderModel->order_give($orderInfo['user_id'],$orderInfo);

            //}
            Db::commit();
        } catch (\Exception $e) {
            // rollback transaction
            Db::rollback();
            return json(['status' => 0, 'data' => [], 'msg' => $e->getMessage()]);
        }
        return json(['status' => 1,'msg' => '支付成功','result' => $orderInfo['order_id']]);

        //       $orderInfo = Db::name('order')->where([['user_id','=',$user_id], ['order_id','in',$order_ids]])->select()->toArray();
        //       if (!$orderInfo) {
        //           return json(['status' => 0, 'msg' => 'The order was not found']);
        //       }
        //       $price = 0;
        //       $order_sn ='';
        //       foreach ($orderInfo as $k => $v) {
        //           if ($v['pay_status'] == 1) {
        //               return json(['status' => 0, 'msg' => 'The order has been paid']);
        //           }
        //           $price += $v['order_amount'];
        //           $order_sn .= $v['order_sn'] . ',';
        //       }
        //       $order_sn = trim($order_sn,',');
        //       //Determine whether there is a snap-up order
        // 			$order_goods = Db::name('order_goods')->where([['order_id','in',$order_ids]])->select();
        // 			$goods_name = '';
        // 			foreach ($order_goods as $k => $v) {
        // 			if ($v['prom_type'] == 1) {
        // 			//Purchase order to determine whether it can be purchased
        // 			$flash_sale = new \app\common\model\FlashSale($v['prom_id']);
        // 			if ($flash_sale->checkFlashSaleIsEnd()) {
        // 			return json(['status' => 0, 'msg' => $v['goods_name'].'-Shopping campaign has ended']);
        // 			}
        // 			if (!$flash_sale->checkActivityIsAble()) {
        // 			return json(['status' => 0, 'msg' => $v['goods_name'].'-buying activity has not started']);
        // 			}
        // 			$goods_num = $flash_sale->getUserFlashResidueGoodsNum($user_id, $v['goods_num']);
        // 			if ($v['goods_num'] > $goods_num) {
        // 			return json(['status' => 0, 'msg' => $v['goods_name'].'-Insufficient number of snaps, you can still buy '.$goods_num.'pieces']);
        //               }
        //           }
        //           $goods_name .= '|' . $v['goods_name'];
        //       }

        // //The product name is too long and needs to be intercepted
        //       $goods_name=msubstr($goods_name,0,30);
        //       if($pay_type = 'balance'){
        //           $orderModel = new OrderModel();
        //           $res = $orderModel->balance_pay($order_ids,$user_id,$price,$order_sn);
        //           return json($res);
        //       }
        //       $payment = new Payment();
        //       if ($pay_type == 'alipay') {
        //           $res = $payment->ali_wap($user_id, $goods_name, $orderInfo['order_sn'], $orderInfo['order_amount'], ['method' => 'shoporder', 'param' => ['order_number' => $orderInfo['order_sn'], 'param' => 2]], url('wap/order/pay_success', ['order_id' => $order_id], '', true), 'Buy'.$goods_name, 1);
        //       } else {
        //           $openid = Db::name('oauth_user')->where(['from' => 'weixin', 'uid' => $user_id])->value('openid');
        //           $res = $payment->wx_pub($openid, $user_id, $goods_name, $orderInfo['order_sn'], $orderInfo['order_amount'], ['method' => 'shoporder', 'param' => ['order_number' => $orderInfo['order_sn'], 'param' => 3]], 'Buy' . $goods_name, 1);
        //       }
        //return json($res);
    }
    /**
     * Express information
     */
    public function get_send_info($order_id) {
        $user_id = $this->uid();
        if (!$order = Db::name('order')->where(['order_id' => $order_id, 'user_id' => $user_id])->field('invoice_no,shipping_name')->find()) {
            return json(['status' => -1, 'msg' => 'There are no matching orders or the order has not been shipped']);
        }
        //$host = "http://jisukdcx.market.alicloudapi.com";
        $host = "https://wuliu.market.alicloudapi.com";
        $path = "/express/query";
        $path = "/kdi";
        $method = "GET";
        $appcode = "e32c5f7604c247ba94a9867fdd8fe23f";
        $headers = array();
        array_push($headers, "Authorization:APPCODE " . $appcode);
        //$querys = "number=$code&type=auto";
        //$querys = "no=$code&type=zto";
        $code = $order['invoice_no'];
        $querys = "no=$code";
        $bodys = "";
        $url = $host . $path . "?" . $querys;

        $curl = curl_init();
        curl_setopt($curl, CURLOPT_CUSTOMREQUEST, $method);
        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
        curl_setopt($curl, CURLOPT_FAILONERROR, false);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_HEADER, false);
        if (1 == strpos("$" . $host, "https://")) {
            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
        }
        $result = curl_exec($curl);
        $result = json_decode($result);
        return json(['status'=>1,'order'=>$order,'result'=>$result]);
    }
}