<?php
/**
 * Created by PhpStorm.
 * User: tianfeiwen
 * Date: 2017/9/25
 * Time: 8:59
 */

namespace app\api\controller;

use think\facade\Db;
use think\facade\Config;
use app\common\model\Cart;
use app\common\model\Goods as GoodsModel;
use app\common\model\Member;

class Goods extends Base
{
    public function initialize()
    {
        header("Content-type:text/html;charset=utf-8");
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    /**
     * Points deduction
     * @param $top_cate [int] Top module 1VIP product 2Preferential product 3Special product 4Direct purchase 5High-end
     * @param $type [string] Data type 'is_deduction'=>points deduction,'is_return'=>return points,'is_recommend'=>popular recommendation
     * @param $order_by [string] Sort by what 'colligate'=>comprehensive,'sales_num'=>sales,'shop_price'=>price
     * @param $order [string] Sort method 'asc'=>positive order, 'desc'=>flashback
     * @param $screen[string] filter price-28_30@brand-12@spec-15
     * @param $page [int] current page
     * @param $num [int] number
     * @return \think\response\Json
     */
    public function special_goods($top_cate=0,$tid=0,$type, $order_by = 'colligate', $order = 'desc', $screen = '', $page = 1, $num = 8)
    {   
        if($top_cate){
            $map[] = ['top_cate','=', $top_cate];
        }
        if($tid){
            $map[] = ['goods_type','=',$tid];
        }
        //type of data
        if ($type == 'is_return') {
            $map[] = ['give_integral','>', 0];
        } elseif ($type == 'is_recommend') {
            $map[] = ['is_recommend','=',1];
            $map[] = ['exchange_integral','<=', 0];
        } elseif($type == 'is_deduction') {
            $map[] = ['exchange_integral','>', 0];
        } else {
            //is to search
            $map[] = ['goods_name','like', '%' . $type . '%'];
        }
        $map[] = ['is_on_sale','=',1];
        $map[] = ['status','=',1];
        $map[] = ['spec_num','>', 0];
        $goods_id_arr = Db::name('goods')->where($map)->column('id');
        $goodsModel = new GoodsModel();
        $filter = [];
        $filter[] = [['brand' => $goodsModel->get_filter_brand($goods_id_arr)]];
        $filter[] = [['price' => $goodsModel->get_filter_price($goods_id_arr)]];
        if ($screen) {
            $screen = explode('@', $screen);
            $screen_arr = [];
            foreach ($screen as $v) {
                $v = explode('-', $v);
                $screen_arr[$v[0]] = explode('_', $v[1]);
            }
            if (isset($screen_arr['price']) && !empty($screen_arr['price'])) {
                $map[] = ['shop_price','BETWEEN' , [$screen_arr['price'][0],$screen_arr['price'][1]]];
            }
            if (isset($screen_arr['brand']) && !empty($screen_arr['brand'])) {
                $map[] = ['brand_id','in', $screen_arr['brand']];
            }
            $goods_id_arr = Db::name('goods')->where($map)->column('id');
        }

        if (!$goods_id_arr) {
        return json(['status' => 1, 'msg' => 'no data', 'data' => []]);
        }
        //Sort by
        in_array($order_by, ['colligate', 'sales_num', 'shop_price']) || $order_by = 'colligate';
        in_array($order, ['asc', 'desc']) || $order = 'desc';
        if ($order_by == 'colligate') {
            $order_str = "sort asc, on_time desc";
        } else {
            $order_str = "{$order_by} {$order}";
        }
        $list = Db::name('goods')->where([['spec_num','<>',0],['status','=',1],['is_delete','=',0],['is_on_sale','=',1]])->where('id','in', $goods_id_arr)->order($order_str)->page($page, $num)->select();

        if ($list) {
            $data = [
                'goods_list'    => $this->point_rate($list),
                'filter'        => $filter
            ];
        return json(['status' => 1, 'msg' => 'Get data successfully', 'data' => $data]);
        }
        return json(['status' => 1, 'msg' => 'no data', 'data' => []]);
    }

    /**
     * Class II
     * @return \think\response\Json
     */
    public function get_con_category($id=0,$top_cate=1)
    {
        $list = Db::name('goods_catetype')->where(['status'=>0,'top_cate'=>$top_cate])->field('id,name,status,orderby')->order('orderby asc')->select()->toArray();
        $child = [];
        if(!empty($list)){
            $map= ['pid'=>$list[0]['id']];
            if($id){
                $map = ['pid'=>$id];
            }
            $child = Db::name('goods_type')->where($map)->order('sort asc')->select();
        }
        
        //$list = $model->getCategoryTree();
        return $this->returnJson(['list'=>$list,'child'=>$child]);
    }

    /**
     * Home Category Products
     * @param 
    
    */
    public function home_category($limit = 6, $num = 4){
        $list = Db::name('goods_catetype')->where(['status'=>0])->field('id,name,status,orderby')->order('orderby asc')->limit($limit)->select()->toArray();
        foreach ($list as $k => $v) {
            $list[$k]['child'] = Db::name('goods_type')->where('pid',$v['id'])->order('sort asc')->limit($num)->select();
        }
        return $this->returnJson(['list'=>$list]);
    }

    /**
     * Retrieve product data based on category ID
     * @param $cid [int] Category ID
     * @param $order_by [string] Sort by what 'colligate'=>comprehensive,'sales_num'=>sales,'shop_price'=>price
     * @param $order [string] Sort method 'asc'=>positive order, 'desc'=>flashback
     * @param $screen[string] filter price-28_30@brand-12@spec-_15
     * @param $page [int] current page
     * @param $num [int] number
     * @return \think\response\Json
     */
    public function type_goods($tid, $order_by = 'colligate', $order = 'desc', $screen = '', $page = 1, $num = 8)
    {
        $map = [];
        $map[] = ['is_on_sale','=',1];
        $map[] = ['spec_num','>', 0];
        $map[] = ['status','=',1];
        $map[] = ['goods_type','=',$tid];
        $map[] = ['exchange_integral','<=', 0];
        $goods_id_arr = Db::name('goods')->where($map)->column('id');
        $goodsModel = new GoodsModel();
        $filter_spec = $goodsModel->get_filter_spec($tid, $goods_id_arr);     //Build Filter Specifications
        $filter = [];
        foreach ($filter_spec as $k => $v) {
            $filter[] = [[$k => $v]];
        }
		$filter[] = [['brand' => $goodsModel->get_filter_brand($goods_id_arr)]];
        $filter[] = [['price' => $goodsModel->get_filter_price($goods_id_arr)]];
        //filter
        if ($screen) {
            $screen = explode('@', $screen);
            $screen_arr = [];
            foreach ($screen as $v) {
                $v = explode('-', $v);
                $screen_arr[$v[0]] = explode('_', $v[1]);
            }
            if (isset($screen_arr['price']) && !empty($screen_arr['price'])) {
                $map[] = ['shop_price','>=', $screen_arr['price'][0]];
                $map[] = ['shop_price','<=', $screen_arr['price'][1]];
            }
            if (isset($screen_arr['brand']) && !empty($screen_arr['brand'])) {
                $map[] = ['brand_id','in', $screen_arr['brand']];
            }
            
            $goods_id_arr = Db::name('goods')->where($map)->column('id');

            if (isset($screen_arr['spec']) && !empty($screen_arr['spec'])) {
                $goods_id_arr_spec = Db::name('spec_goods')->where('goods_id','in', $goods_id_arr)->select();
                $_goods_id_arr = [];
                foreach ($goods_id_arr_spec as $k => $v) {
                    $key = explode('_', $v['key']);
                    if (count(array_intersect($key, $screen_arr['spec'])) == count($screen_arr['spec'])) {
                        $_goods_id_arr[] = $v['goods_id'];
                    }
                }
                $_goods_id_arr = array_unique($_goods_id_arr);
                $goods_id_arr = array_values(array_intersect($goods_id_arr, $_goods_id_arr));
            }
        }
        if (!$goods_id_arr) {
            return json(['status' => 1, 'msg' => 'no more data', 'data' => []]);
        }
        //Sort by
        in_array($order_by, ['colligate', 'sales_num', 'shop_price']) || $order_by = 'colligate';
        in_array($order, ['asc', 'desc']) || $order = 'desc';
        if ($order_by == 'colligate') {
            $order_str = "sort asc, on_time desc";
        } else {
            $order_str = "{$order_by} {$order}";
        }
        $list = Db::name('goods')->where([['spec_num','<>',0],['status','=',1],['is_delete','=',0],['is_on_sale','=',1]])->where('id', 'in', $goods_id_arr)->order($order_str)->page($page, $num)->select();
        if ($list) {
            $goods_type = Db::name('goods_type')->where('id', $tid)->value('name');
            $data = [
                'goods_type' => $goods_type,
                'goods_list'    => $this->point_rate($list),
                'filter'        => $filter
            ];
        return json(['status' => 1, 'msg' => 'Get data successfully', 'data' => $data]);
        }
        return json(['status' => 1, 'msg' => 'no data', 'data' => []]);
    }
    /**
     * product details
     * @param $id
     * @return \think\response\Json
     * @throws \think\Exception
     */
    public function goods_detail($id)
    {
        $info = Db::name('goods')->where(['id'=>$id,'is_on_sale'=>1,'status'=>1])->where('spec_num','> =',0)->find();
        if(!$info){
            return json(['status' => 0, 'msg' => 'The item does not exist or has been removed']);
        }
        //Check if it is a spike purchase
        if ($info['prom_type'] == 1) {
            $flashSaleModel = new \app\common\model\FlashSale($info['prom_id']);
            $info = Db::name('goods')->where('id', $id)->find();
            if ($info['prom_type'] == 1 && $flashSaleModel->checkActivityIsAble()) {
                $info['flash_sale'] = $flashSaleModel->getPromModel();
            }
        }
        
		//Business information
        $info['merchant'] = Db::name('shop_lists')->where('id',$info['shop_id'])->field('name,image,phone,address')->find ();
        
        //freight
        $info['freight'] = '';
        // if(!$info['is_free_shipping']){
        // //1 by the number of pieces 2 by weight 3 by volume
        // $freight = Db::name('freight_template')->where('id',$info['fid'])->find();
        // }

        // Points exchange ratio
        $point_rate = config('config.point_rate');
        if ($info['exchange_integral']) {
            $info['exchange_integral_money'] = number_format( $info['exchange_integral'] / $point_rate, 2);
        }
        // product gallery
        $info['img_tuku'] = Db::name('goods_images')->where('goods_id', $id)->order('id asc')->column('image_url');
        //Product specifications
        $spec_goods = Db::name('spec_goods')->where('goods_id', $id)->where('spec_num','>',0)->column('spec_key,spec_key,spec_name,shop_price,spec_num','spec_key');
        if ($spec_goods) {
            
            $key = array_keys($spec_goods);
            //['12_20_15','12_21_15']
            $keyArr = [];
            foreach ($key as $k => $v) {
                $v = explode('_', $v);
                foreach ($v as $k1 => $v1) {
                    if (isset($keyArr[$k1]) && in_array($v1, $keyArr[$k1])) {
                        continue;
                    }
                    $keyArr[$k1][] = $v1;
                }
            }
            //[[12],[20,21],[15]]
            // $specArr = [];
            // foreach ($keyArr as $k => $v) {
            //     $spec_id = Db::name('goods_spec_item')->where('id', $v[0])->value('spec_id');
            //     $key = Db::name('goods_spec')->where('id', $spec_id)->value('name');
            //     $item = Db::name('goods_spec_item')->field('id,item')->where('id','in', $v)->order('id asc')->select();
            //     $specArr[$key] = $item;
            // }
            // $info['sepc_arr']  = $specArr;

            foreach ($keyArr as $k => $v) {
                $item = Db::name('goods_spec_item')->field('id,item')->where('id','in', $v)->order('id asc')->select();
            }
            $info['sepc_arr']  = $item;
            //Attribute corresponding price inventory and pictures
            foreach ($spec_goods as $k => $v) {
                $key = explode('_', $v['spec_key']);
                $img = Db::name('spec_image')->where([['goods_id','=',$id], ['spec_item_id','in', $key]])->value('src');
                $spec_goods[$k]['img']      = $img ? $img : $info['original_img'];
                //Returns the string concatenated with the selected specification item to the front end
                $spec_goods[$k]['key_value'] = '';
                if($v['spec_name']){
                    foreach(explode(' ', $v['spec_name']) as $k2 => $v2) {
                        $arr = explode(':', $v2);
                        $spec_goods[$k]['key_value'] .= ' "' . $arr[1] . '"';
                    }
                    trim($spec_goods[$k]['key_value']);
                }
            }
            $info['spec_data'] = $spec_goods;
        } else {
            $info['sepc_arr']  = [];
            $info['spec_data'] = [];
        }
        //Product attributes
        $attr_goods = Db::name('goods_attr')->where('goods_id', $id)->select();
        if ($attr_goods) {
            $attrArr = [];
            foreach ($attr_goods as $k => $v) {
                $key = Db::name('goods_attribute')->where('id', $v['attr_id'])->value('name');
                $attrArr[$key] = $v['attr_value'];
            }
            $info['attr_arr'] = $attrArr;
        } else {
            $info['attr_arr'] = [];
        }

        //Popular recommended likes Recommend products under this product category
        $recommend_goods = Db::name('goods')->where('status','=',1)->where(['cat_id' => $info['cat_id'],'is_love'=>1, 'is_on_sale' => 1])->limit(6)->select();
        $info['recommend_goods'] = $this->point_rate($recommend_goods);
        //Whether to favorite
        $info['is_collection'] = -1;
        if ($user_id = get_uid()) {
            $is_collection = Db::name('goods_collection')->where(['user_id' => $user_id, 'goods_id' => $id])->count();
            $info['is_collection'] = $is_collection ? 1 : 0;
        }
        //increase clicks
        Db::name('goods')->where('id', $id)->inc('click_count')->update();
        return $this->returnJson($info);
    }

    /**
     * collect&unfavorite
     * @param $id
     * @return \think\response\Json
     */
    public function collection($id)
    {
        $user_id = $this->uid();

        if (!Db::name('goods')->where('id', $id)->find()) {
			return json(['status' => 0, 'msg' => 'No such item']);
        }
        if (Db::name('goods_collection')->where(['user_id' => $user_id, 'goods_id' => $id])->find()) {
            // unfavorite
            Db::name('goods_collection')->where(['user_id' => $user_id, 'goods_id' => $id])->delete();
            return json(['status' => 1, 'msg' => 'unfavorite success']);
        } else {
            //collect
            Db::name('goods_collection')->insert(['user_id' => $user_id, 'goods_id' => $id, 'add_time' => time()]);
            return json(['status' => 1, 'msg' => 'collection success']);
        }
    }

    /**
     * Favorites list
     * @return \think\response\Json
     */
    public function collection_list($page = 1, $num = 8)
    {
        $user_id = $this->uid();
        $list = Db::name('goods_collection')->alias('a')->field('g.*, a.id, a.goods_id')->join('goods g', 'a.goods_id = g.id', 'left')->where('a.user_id', $user_id)->order('a.id desc')->page($page, $num)->select()->toArray();
        foreach ($list as $k => $v) {
            $list[$k]['collection_num'] = Db::name('goods_collection')->where('goods_id',$v['goods_id'])->count();
        }
        $collection_num = Db::name('goods_collection')->alias('a')->field('g.*, a.id, a.goods_id')->join('goods g', 'a.goods_id = g.id', 'left')->where('a.user_id', $user_id)->count();
        $follow_num = Db::name('shop_follow')->where(['user_id' => $user_id])->count();
        //return $this->returnJson($this->point_rate($list));
        return json(['status' => 1,'data'=>$list, 'count'=>['collection_num'=>$collection_num,'follow_num'=>$follow_num], 'msg' => 'search successful']);
    }

    /**
     * Multiple delete favorites
     * @param $ids
     * @return \think\response\Json
     * @throws \think\Exception
     */
    public function uncollection($ids)
    {
        $user_id = $this->uid();
        $ids = explode('-', $ids);
        if ($ids) {
            Db::name('goods_collection')->where([['user_id', '=', $user_id], ['id', 'in', $ids]])->delete();
			return json(['status' => 1, 'msg' => 'deletion successful']);
        } else {
            return json(['status' => 0, 'msg' => 'parameter error']);
        }
    }
    /**
     * Add to cart
     * @param $goods_id [int] Product ID
     * @param $goods_num [int] number of items
     * @param string $goods_spec_key [int] Goods specification 12_2_3
     * @return \think\response\Json
     */
    public function add_cart($goods_id, $goods_num = 1, $goods_spec_key = '')
    {
        $user_id = $this->uid();
        $exchange_integral = Db::name('goods')->where('id',$goods_id)->value('exchange_integral');
        if($exchange_integral>0){
            return json(['status' => 0, 'msg' => 'Points cannot be added to the shopping cart']);
        }
        $cartModel = Cart::getInstance($user_id);
        $res = $cartModel->add($goods_id, $goods_num, $goods_spec_key);
        return json($res);
    }

    /**
     * Get cart quantity
     * @return \think\response\Json
     */
    public function get_cart_goods_num()
    {
        $user_id = $this->uid();
        $cartModel = Cart::getInstance($user_id);
        $res = $cartModel->getUserCartGoodsNum();
        return json(['status' => 1, 'msg' => 'Get data successfully', 'data' => $res]);
    }

    /**
     * Shopping cart quantity operation
     * @param $id cart information id
     * @param string $mode increase + decrease -
     * @param int $num number
     * @return \think\response\Json
     */
    public function change_cart_num($id, $mode = '', $num = 1)
    {
        $user_id = $this->uid();
        $cartModel = Cart::getInstance($user_id);
        if ($mode == '-') {
            $res = $cartModel->reduce($id, $num);
        }else if($mode == '+') {
            $res = $cartModel->increase($id, $num);
        }else{
            $res = $cartModel->editData($id, $num);
        }
        return json($res);
    }


    /**
     * Remove from cart
     * @param $id cart information id
     * @return \think\response\Json
     */
    public function remove_cart($id)
    {
        $user_id = $this->uid();
        $cartModel = Cart::getInstance($user_id);
        $res = $cartModel->remove($id);
        return json($res);
    }

    /**
     * Toggle shopping cart checked and unchecked
     * @param $id
     * @return \think\response\Json
     */
    public function change_cart_selected($id)
    {
        $user_id = $this->uid();
        $cartModel = Cart::getInstance($user_id);
        $res = $cartModel->changeSelected($id);
        return json($res);
    }

    /**
     * Select all shopping cart
     * @param $selected Whether to select all 1 select all 0 not select all
     * @return \think\response\Json
     */
    public function change_cart_selected_all($selected = 0,$shop_id = 0)
    {
        $user_id = $this->uid();
        $cartModel = Cart::getInstance($user_id);
        $res = $cartModel->changeSelectedAll($selected,$shop_id);
        return json($res);
    }

    /**
     * Cart list
     * @param int $selected 0 is all 1 is selected
     * @return \think\response\Json
     */
    public function get_cart_list($selected = 0)
    {
        $user_id = $this->uid();
        $cartModel = Cart::getInstance($user_id);
        $res = $cartModel->cartList($selected);
        if ($res['cartList']) {
            //Follow and unfollow
            $collectionID = [];
            if ($user_id) {
                $collectionID = Db::name('goods_collection')->where(['user_id' => $user_id])->column('goods_id');
            }
            $cartListGroup=[];
            foreach ($res['cartList'] as $k => $v) {
                $v['is_collection'] = -1;
                $res['cartList'][$k] = $v;
                if ($user_id) {
                    $v['is_collection'] = in_array($v['goods_id'], $collectionID) ? 1 : 0;
                    $res['cartList'][$k] = $v;
                }
                $spec_goods = Db::name('spec_goods')->where(['goods_id'=>$v['goods_id'],'spec_key'=>$v['spec_key']])->find();
                if($spec_goods){
                    $cartListGroup[$v['shop_name']][] = $v;//Data Merchant Group
                }else{
                    Db::name('cart')->where('id',$v['id'])->delete();
                }
            }
            $res['cartList'] = $cartListGroup;
            if($res['cartList']){
		return json(['status' => 1, 'msg' => 'Data obtained successfully', 'data' => $res]);
            }else{
                return json(['status' => 1, 'msg' => 'Shopping cart has no items', 'data' => '']);
            }
            
        }
        return json(['status' => 1, 'msg' => 'Shopping cart has no items', 'data' => '']);
        
    }

    /**
     * Generic return data method
     * @param $data
     * @return \think\response\Json
     */
    protected function returnJson($data)
    {
        return $data ? json(['status' => 1, 'msg' => 'Get data successfully', 'data' => $data]) : json(['status' => 0, 'info' => 'no more data', 'data' => '']);
    }

    /**
     * Universal to list exchange points converted into amount
     * @param $list
     * @return mixed
     */
    protected function point_rate($list)
    {
        // Points exchange ratio
        $point_rate = config('config.point_rate');
        foreach ($list as $k => $v) {
            if ($v['exchange_integral']) {
                //dump($v['exchange_integral']);exit;
                $v['exchange_integral_money'] = number_format($v['exchange_integral'] / $point_rate, 2);
                $list[$k] = $v;
            }
        }
        return $list;
    }

    /**
     * @param $goods_id Product ID
     * @param $order_id order ID
     * @param string $img Multiple images separated by @
     * @param int $is_anony is anonymous by default no
     * @param int $rank star default is 0
     * @return \think\response\Json
     */
    //public function comment($goods_id, $order_id, $content, $type = 0, $img = '', $is_anony = 0, $rank = 0)
    public function comment($order_id,$goods_list)
    {
        $user_id = $this->uid();
        //$order_id;
        if(!$row = Db::name('order')->where(['order_id' => $order_id, 'user_id' => $user_id])->find()) {
            return json(['status' => 0, 'msg' => 'no such order']);
        }
        if ($row['order_status'] != 2 && $row['order_status'] != 4) {
            return json(['status' => 0, 'msg' => 'Please comment after receipt']);
        }
        $data = [];
        foreach ($goods_list as $k => $v) {
            $data[$k]['orderId']= $order_id;
            $data[$k]['infoId'] =  $v['goods_id'];
            $data[$k]['uid'] =  $user_id;
            $data[$k]['is_anony'] =  $v['is_anony'];
            $data[$k]['pic_url'] = '';
            if(isset($v['img'])){
                $data[$k]['pic_url'] =  $v['img'];
                if ($data[$k]['pic_url']) {
                    $url = array();
                    foreach ($data[$k]['pic_url'] as $vv) {
                        $url[]['url'] = $vv;
                    }
                    $data[$k]['pic_url'] = json_encode($url);
                }
            }
            $data[$k]['content'] = '';
            if(isset($v['content'])){
                $data[$k]['content'] =  trim($v['content']);
            }
            $data[$k]['rank'] = 0;
            if(isset($v['rank'])){
                $data[$k]['rank'] = (int)$v['rank'];
            }
            $data[$k]['type'] = 0;
            $data[$k]['c_time'] = time();
            if (!Db::name('order_goods')->where(['order_id' => $order_id, 'goods_id' => $v['goods_id']])->find()) {
                return json(['status' => 0, 'msg' => 'You do not have permission to comment on this product']);
            }
            $rows = Db::name('goods_comment')->alias('com')->field('com.id,com.uid,com.infoId,com.orderId,con.type')->join('goods_comment_content con', 'com.id = con.commentId')->where(['rec_id'=>$v['rec_id'],'com.infoId' => $v['goods_id'], 'com.orderId' => $order_id, 'con.type' => 0])->find();
            $type = 0;
            if ($type == 0) {
                if ($rows) {
                    return json(['status' => 0, 'msg' => 'You have already reviewed this item and cannot comment']);
                }
            } elseif ($type == 1) {
                if (!$rows) {
				return json(['status' => 0, 'msg' => 'You cannot append comments']);
                }
            } else {
                return json(['status' => 0, 'msg' => 'type parameter error']);
            }

            if (!$r = Db::name('goods_comment')->where(['infoId' => $v['goods_id'], 'orderId' => $order_id])->find()) {

                $arr = [
                    'uid'=>$user_id,
                    'infoId'=>$v['goods_id'],
                    'shopId'=>$row['shop_id'],
                    'orderId'=>$order_id,
                    'rec_id' =>$v['rec_id'],
                    'is_anony'=>$v['is_anony'],
                    'c_time'=>time()
                ];
                if (!$id = Db::name('goods_comment')->insertGetId($arr)) {
                    return json(['status' => 0, 'msg' => 'Failed to comment']);
                }
                //Review of this product
                DB::name('order_goods')->where(['order_id' => $order_id, 'goods_id' => $v['goods_id']])->update(['is_comment' => 1]);//Modify product order information has been commented
                Db::name('goods')->where('id', $v['goods_id'])->inc('comment_count')->update();
                ////Increase the number of product reviews
            } else {
                $id = $r['id'];
            }
            $data[$k]['commentId'] = $id;
            unset($data[$k]['uid']);
            unset($data[$k]['is_anony']);
            unset($data[$k]['orderId']);
            unset($data[$k]['infoId']);
            $brr = [
                'commentId'=>$data[$k]['commentId'],
                'rank'=>$data[$k]['rank'],
                'type'=>$data[$k]['type'],
                'content'=>$data[$k]['content'],
                'pic_url'=>$data[$k]['pic_url'],
                'c_time'=>$data[$k]['c_time']

            ];
            if (!Db::name('goods_comment_content')->insert($brr)) {
                return json(['status' => 0, 'msg' => 'Failed to comment']);
            }

        }

        
        Db::name('order')->where('order_id', $order_id)->update(['order_status' => 4]);//Modify order status
        $ctime = date('Y-m-d H:i:s', time());
        return json(['status' => 1, 'msg' => 'Comment successful', 'data'=>['ctime' => $ctime]]);
    }

    //Product review list
    public function comment_list($goods_id, $page = 1, $num = 8) {
        $infoId = $goods_id;
        $page   = $page;
        $count  = $num;
        $list = Db::name('goods_comment')->alias('a')->join('order_goods b','a.rec_id = b.rec_id')->field('a.*,b.spec_key_name')->where('infoId', $infoId)->order('id desc')->page($page, $count)->select()->toArray();
        foreach ($list as $key => $val) {
            $data = Db::name('goods_comment_content')->where('commentId', $val['id'])->order('type asc,id desc')->select()->toArray();
            foreach ($data as $k => $v) {
                $data[$k]['pic_url']   = json_decode($v['pic_url'], true);
                $data[$k]['reply_pic'] = json_decode($v['reply_pic'], true);
                if (!$val['is_anony']) {
                    $member   = new member();
                    $userInfo = $member->field('head_img, nickname')->where('id', $val['uid'])->find();
                    $data[$k]['user_avatar']   = $userInfo['head_img'];
                    $data[$k]['user_nickname'] = $userInfo['nickname'];
                } else {
                    $data[$k]['user_avatar']   = '';
					$data[$k]['user_nickname'] = 'Anonymous User';
                }
                if ($v['reply_uid']) {
                    $user_reply = Db::name('admin')->field('username')->where('id', $v['reply_uid'])->find();
                    $data[$k]['user_reply_avatar'] = '';
                    $data[$k]['user_reply_nickname'] = $user_reply['username'];
                }
            }
            $list[$key]['comment_content'] = $data;
        }
        if ($list) {
            return json(['status' => 1, 'msg' => 'Get comment data successfully', 'data' => $list]);
        } else {
            return json(['status' => 0, 'msg' => 'no data']);
        }
    }


    /**
     * my footprint
     */
    public function footprint($page = 1, $num = 8)
    {
        $user_id = $this->uid();
        $list = Db::name('goods_footprint')->alias('a')->field('g.*, a.id, a.goods_id, a.add_time')->join('goods g', 'a.goods_id = g.id', 'left')->where('a.user_id', $user_id)->order('a.add_time desc')->page($page, $num)->select();
        $list = $this->point_rate($list);
        $_list = [];
        foreach ($list as $k => $v) {
            $_list[date('Y-m-d', $v['add_time'])]['time']   = date('Y-m-d', $v['add_time']);
            $_list[date('Y-m-d', $v['add_time'])]['list'][] = $v;
        }
        return $this->returnJson($_list);
    }

    /**
     * Record footprints
     */
    public function add_footprint($id)
    {
        $user_id = $this->uid();
        if (!Db::name('goods')->where('id', $id)->find()) {
            return json(['status' => 0, 'msg' => 'No such item']);
        }
        if (Db::name('goods_footprint')->where(['user_id' => $user_id, 'goods_id' => $id])->find()) {
            Db::name('goods_footprint')->where(['user_id' => $user_id, 'goods_id' => $id])->update(['add_time' => time()]);

        } else {
            Db::name('goods_footprint')->insert(['user_id' => $user_id, 'goods_id' => $id, 'add_time' => time()]);
        }
        return json(['status' => 1, 'msg' => 'Record success']);
    }

    /**
     * Clear footprint
     */
    public function clear_footprint()
    {
        $user_id = $this->uid();
        Db::name('goods_footprint')->where('user_id', $user_id)->delete();
        return json(['status' => 1, 'msg' => 'Cleared successfully']);
    }

    /**
     * Lightning Deals
     */
    public function flash_sale($page = 1, $num = 8, $active = 0)
    {
        $list = Db::name('flash_sale')->alias('a')->field('a.*, g.original_img')->join('goods g', 'a.goods_id = g. id', 'left')->order('a.id desc')->page($page, $num)->select();
        if ($list) {
            foreach ($list as $k => $v) {
                // determine whether to start
                if($v['start_time'] > time()){
                    $list[$k]['status'] = 0;//Not started
                }else if($v['start_time'] < time() && $v['end_time'] > time()){
                    $list[$k]['status'] = 1;//In progress
                }else{
                    $list[$k]['status'] = 2;//Ended
                }
                if ($v['goods_num'] - $v['buy_num'] <= 0) {
                    $list[$k]['status'] = 2;//Ended
                }
            }
            if ($active) {
                $_list=[];
                foreach ($list as $v) {
                    if ($v['status'] == 1) {
                        $_list[] = $v;
                    }
                }
		return json(['status' => 1, 'msg' => 'Get the data of the item being snapped up successfully', 'data' => $_list]);
            }
            return json(['status' => 1, 'msg' => 'Get the data of the snapped product successfully', 'data' => $list]);
        } else {
            return json(['code' => 0, 'msg' => 'no data']);
        }

    }

    //Redeem
    public function exchangeList($page=1,$num=8){
        $list=Db::name('goods')->where([['spec_num','>', 0],['exchange_integral','>=',1],['is_on_sale','=',1,'status','=',1]])->order('sales_num desc')->page($page,$num)->select();
        $list = $this->point_rate($list);
        return json(['status' => 1, 'data' => $list, 'msg' => '']);

    }
}